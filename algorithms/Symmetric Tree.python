# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root!=None:
            if root.left!=None and root.right!=None:
                return self.checkTree(root.left,root.right)
            elif root.left==None and root.right==None:
                return True
            else:
                return False
        else:
            return True
    def checkTree(self,node1,node2):
        print(node1.val,node2.val)
        if node1.val==node2.val:
            if node1.right!=None and node2.left!=None and node1.left==None and node2.right==None:
                return self.checkTree(node1.right,node2.left)
            elif node1.right==None and node2.left==None and node1.left!=None and node2.right!=None:
                return self.checkTree(node1.left,node2.right)
            elif node1.right!=None and node2.left!=None and node1.left!=None and node2.right!=None:
                return self.checkTree(node1.right,node2.left) and self.checkTree(node1.left,node2.right)
            elif node1.right==None and node2.left==None and node1.left==None and node2.right==None:
                return True
            else:
                return False
        else:
            return False
        